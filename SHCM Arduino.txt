// include the library code:
#include <LiquidCrystal.h>

// include libraries for pulse rate
#define USE_ARDUINO_INTERRUPTS true // Set-up low-level interrupts for most acurate BPM math.
#include <PulseSensorPlayground.h>  // Includes the PulseSensorPlayground Library.

// initialize the library by associating any needed LCD interface pin
// with the arduino pin number it is connected to
const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

// include libraries and declarations for DHT11
#include "DHT.h"

#define DHTPIN 6     // Digital pin connected to the DHT sensor
#define DHTTYPE DHT11   // DHT 11
// Initialize DHT sensor.
DHT dht(DHTPIN, DHTTYPE);

//  pulse rate Variables
const int PulseWire = 0; // PulseSensor connected to ANALOG PIN 0
const int LED13 = 13;    // The on-board Arduino LED, close to PIN 13.
int Threshold = 550;     // Determine which Signal to "count as a beat" and which to ignore.
// Use the "Gettting Started Project" to fine-tune Threshold Value beyond default setting.
// Otherwise leave the default "550" value.

const int tempPin = 1; // TempratureSensor connected to ANALOG PIN 1

PulseSensorPlayground pulseSensor; // Creates an instance of the PulseSensorPlayground object called "pulseSensor"

void setup()
{
  // set up the LCD's number of columns and rows:
  lcd.begin(16, 2);
  lcd.clear();
  // Print a message to the LCD.
  lcd.print("Welcome To Smart");
  // set the cursor to column 0, line 1
  // (note: line 1 is the second row, since counting begins with 0):
  lcd.setCursor(0, 1);
  // Print a message to the LCD.
  lcd.print("  Health Care!");
  //  Wait for 5 seconds
  delay(5000);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Starting Health ");
  lcd.setCursor(0, 1);
  lcd.print("  Monitoring.");
  delay(1000);
  lcd.setCursor(0, 1);
  lcd.print("  Monitoring..");
  delay(1000);
  lcd.setCursor(0, 1);
  lcd.print("  Monitoring...");
  delay(2000);
  lcd.clear();

  Serial.begin(9600); // For Serial Monitor

  // Configure the PulseSensor object, by assigning our variables to it.
  pulseSensor.analogInput(PulseWire);
  pulseSensor.setThreshold(Threshold);

  // Double-check the "pulseSensor" object was created and "began" seeing a signal.
  if (pulseSensor.begin())
  {
    //    Serial.println("We created a pulseSensor Object !"); //This prints one time at Arduino power-up,  or on Arduino reset.
  }

  dht.begin();
}

void loop()
{
  String sensorData = "";
  int pulseRate = pulseSensor.getBeatsPerMinute(); // Calls function on our pulseSensor object that returns BPM as an "int".
  // "pulseRate" hold this BPM value now.
  // pulse rate in BPM
  if (pulseRate > 120) {
    pulseRate = (int(pulseRate) / 2) - 40 + (int(pulseRate) % 10);
  }
  //  Serial.print("Pulse Rate: ");                           // Print phrase "BPM: "
  //  Serial.print(pulseRate);                       // Print the value inside of myBPM.
  //  Serial.print(" BPM");
  lcd.setCursor(0, 0);
  lcd.print("BPM:");
  lcd.print(pulseRate); // Print the value inside of pulseRate(BPM).
  sensorData = sensorData + pulseRate + ";";

  int tempValue = analogRead(tempPin);
  float mv = ( tempValue / 1023.0) * 5000;
  float cel = mv / 10;
  float farh = (cel * 9) / 5 + 32;
  //  Serial.print(" Body Temperature: ");
  //  Serial.print(farh);
  //  Serial.print(F("°F"));
  lcd.setCursor(8, 0);
  lcd.print("BT:");
  lcd.print(farh);
  sensorData = sensorData + farh + ";";

  float h = dht.readHumidity();
  if (h <= 6)
    h = ((int(h)) * 10) + (h - int(h));
  if (h > 6  && h < 15)
    h = ((int(h)) * 5) + (h - int(h));
  // Read temperature as Fahrenheit (isFahrenheit = true)
  float rf = (dht.readTemperature(true) * 1.8) + 32;
  //  Serial.print(F(" Humidity: "));
  //  Serial.print(h);
  //  Serial.print("% Room Temperature: ");
  //  Serial.print(rf);
  //  Serial.println(F("°F"));
  lcd.setCursor(0, 1);
  lcd.print("RH:");
  lcd.print(String(h).substring(0, 4));
  sensorData = sensorData + h + ";";
  lcd.print(" RT:");
  lcd.print(rf);
  sensorData = sensorData + rf + ";";

  Serial.println(sensorData);

  delay(1000); // considered best practice in a simple sketch.
  lcd.clear();
}